{"ast":null,"code":"import _classCallCheck from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortError } from \"./Errors\";\nimport { FetchHttpClient } from \"./FetchHttpClient\";\nimport { HttpClient } from \"./HttpClient\";\nimport { Platform } from \"./Utils\";\nimport { XhrHttpClient } from \"./XhrHttpClient\";\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\nexport var DefaultHttpClient = /*#__PURE__*/function (_HttpClient) {\n  _inherits(DefaultHttpClient, _HttpClient);\n  var _super = _createSuper(DefaultHttpClient);\n  /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\n  function DefaultHttpClient(logger) {\n    var _this;\n    _classCallCheck(this, DefaultHttpClient);\n    _this = _super.call(this);\n    if (typeof fetch !== \"undefined\" || Platform.isNode) {\n      _this._httpClient = new FetchHttpClient(logger);\n    } else if (typeof XMLHttpRequest !== \"undefined\") {\n      _this._httpClient = new XhrHttpClient(logger);\n    } else {\n      throw new Error(\"No usable HttpClient found.\");\n    }\n    return _this;\n  }\n  /** @inheritDoc */\n  _createClass(DefaultHttpClient, [{\n    key: \"send\",\n    value: function send(request) {\n      // Check that abort was not signaled before calling send\n      if (request.abortSignal && request.abortSignal.aborted) {\n        return Promise.reject(new AbortError());\n      }\n      if (!request.method) {\n        return Promise.reject(new Error(\"No method defined.\"));\n      }\n      if (!request.url) {\n        return Promise.reject(new Error(\"No url defined.\"));\n      }\n      return this._httpClient.send(request);\n    }\n  }, {\n    key: \"getCookieString\",\n    value: function getCookieString(url) {\n      return this._httpClient.getCookieString(url);\n    }\n  }]);\n  return DefaultHttpClient;\n}(HttpClient);","map":{"version":3,"names":["AbortError","FetchHttpClient","HttpClient","Platform","XhrHttpClient","DefaultHttpClient","_HttpClient","_inherits","_super","_createSuper","logger","_this","_classCallCheck","call","fetch","isNode","_httpClient","XMLHttpRequest","Error","_createClass","key","value","send","request","abortSignal","aborted","Promise","reject","method","url","getCookieString"],"sources":["/home/nico/expero/toolkit/signalR-test/client/node_modules/@microsoft/signalr/src/DefaultHttpClient.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n"],"mappings":";;;;AAAA;AACA;AAEA,SAASA,UAAU,QAAQ,UAAU;AACrC,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,UAAU,QAAmC,cAAc;AAEpE,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,aAAa,QAAQ,iBAAiB;AAE/C;AACA,WAAaC,iBAAkB,0BAAAC,WAAA;EAAAC,SAAA,CAAAF,iBAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,iBAAA;EAG3B;EACA,SAAAA,kBAAmBK,MAAe;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,iBAAA;IAC9BM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IAEA,IAAI,OAAOC,KAAK,KAAK,WAAW,IAAIX,QAAQ,CAACY,MAAM,EAAE;MACjDJ,KAAA,CAAKK,WAAW,GAAG,IAAIf,eAAe,CAACS,MAAM,CAAC;KACjD,MAAM,IAAI,OAAOO,cAAc,KAAK,WAAW,EAAE;MAC9CN,KAAA,CAAKK,WAAW,GAAG,IAAIZ,aAAa,CAACM,MAAM,CAAC;KAC/C,MAAM;MACH,MAAM,IAAIQ,KAAK,CAAC,6BAA6B,CAAC;;IACjD,OAAAP,KAAA;EACL;EAEA;EAAAQ,YAAA,CAAAd,iBAAA;IAAAe,GAAA;IAAAC,KAAA,EACO,SAAAC,KAAKC,OAAoB;MAC5B;MACA,IAAIA,OAAO,CAACC,WAAW,IAAID,OAAO,CAACC,WAAW,CAACC,OAAO,EAAE;QACpD,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAI3B,UAAU,EAAE,CAAC;;MAG3C,IAAI,CAACuB,OAAO,CAACK,MAAM,EAAE;QACjB,OAAOF,OAAO,CAACC,MAAM,CAAC,IAAIT,KAAK,CAAC,oBAAoB,CAAC,CAAC;;MAE1D,IAAI,CAACK,OAAO,CAACM,GAAG,EAAE;QACd,OAAOH,OAAO,CAACC,MAAM,CAAC,IAAIT,KAAK,CAAC,iBAAiB,CAAC,CAAC;;MAGvD,OAAO,IAAI,CAACF,WAAW,CAACM,IAAI,CAACC,OAAO,CAAC;IACzC;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAEM,SAAAS,gBAAgBD,GAAW;MAC9B,OAAO,IAAI,CAACb,WAAW,CAACc,eAAe,CAACD,GAAG,CAAC;IAChD;EAAC;EAAA,OAAAxB,iBAAA;AAAA,EAnCkCH,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}