{"ast":null,"code":"var _jsxFileName = \"/home/nico/expero/toolkit/signalR-test/client/src/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport ChatWindow from './ChatWindow/ChatWindow';\nimport ChatInput from './ChatInput/ChatInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [connection, setConnection] = useState(null);\n  const [chat, setChat] = useState([]);\n  const latestChat = useRef(null);\n  latestChat.current = chat;\n  useEffect(() => {\n    const newConnection = new HubConnectionBuilder().withUrl('http://localhost:5241/hub').configureLogging(LogLevel.Trace).withAutomaticReconnect().build();\n    setConnection(newConnection);\n  }, []);\n  useEffect(() => {\n    if (connection) {\n      connection.start().then(result => {\n        console.log('Connected to C# Chat Backend!');\n        connection.on('messageReceived', message => {\n          const updatedChat = [...latestChat.current];\n          updatedChat.push(message);\n          console.log(\"message received: \", message);\n          setChat(updatedChat);\n        });\n      }).catch(e => console.log('Connection failed: ', e));\n    }\n  }, [connection]);\n  const sendMessage = async (user, message) => {\n    if (connection._connectionStarted) {\n      try {\n        await connection.invoke(\"NewMessage\", user, message);\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      console.log(JSON.stringify(connection));\n      alert(\"No connection to server yet.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ChatInput, {\n      sendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      chat: chat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"ZvQuAD9qKvwjXseaeCvzaVAbzDc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","HubConnectionBuilder","LogLevel","ChatWindow","ChatInput","jsxDEV","_jsxDEV","Chat","_s","connection","setConnection","chat","setChat","latestChat","current","newConnection","withUrl","configureLogging","Trace","withAutomaticReconnect","build","start","then","result","console","log","on","message","updatedChat","push","catch","e","sendMessage","user","_connectionStarted","invoke","JSON","stringify","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nico/expero/toolkit/signalR-test/client/src/Chat/Chat.js"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from 'react';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\n\nimport ChatWindow from './ChatWindow/ChatWindow';\nimport ChatInput from './ChatInput/ChatInput';\n\nconst Chat = () => {\n    const [ connection, setConnection ] = useState(null);\n    const [ chat, setChat ] = useState([]);\n    const latestChat = useRef(null);\n\n    latestChat.current = chat;\n\n    useEffect(() => {\n        const newConnection = new HubConnectionBuilder()\n            .withUrl('http://localhost:5241/hub')\n            .configureLogging(LogLevel.Trace)\n            .withAutomaticReconnect()\n            .build();\n\n        setConnection(newConnection);\n    }, []);\n\n    useEffect(() => {\n        if (connection) {\n            connection.start()\n                .then(result => {\n                    console.log('Connected to C# Chat Backend!');\n    \n                    connection.on('messageReceived', message => {\n                        const updatedChat = [...latestChat.current];\n                        updatedChat.push( message );\n                    \n                        console.log(\"message received: \", message);\n\n                        setChat(updatedChat);\n                    });\n                })\n                .catch(e => console.log('Connection failed: ', e));\n        }\n    }, [connection]);\n\n    const sendMessage = async (user, message) => {\n\n        if (connection._connectionStarted) {\n            try {\n            await connection.invoke(\"NewMessage\", user, message);\n          } catch (e) {\n            console.log(e);\n          }\n        } else {\n          console.log(JSON.stringify(connection));\n          alert(\"No connection to server yet.\");\n        }\n    }\n\n    return (\n        <div>\n            <ChatInput sendMessage={sendMessage} />\n            <hr />\n            <ChatWindow chat={chat}/>\n        </div>\n    );\n};\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}