{"ast":null,"code":"import _classCallCheck from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\n// it's a very new API right now.\n// Not exported from index.\n/** @private */\nexport var AbortController = /*#__PURE__*/function () {\n  function AbortController() {\n    _classCallCheck(this, AbortController);\n    this._isAborted = false;\n    this.onabort = null;\n  }\n  _createClass(AbortController, [{\n    key: \"abort\",\n    value: function abort() {\n      if (!this._isAborted) {\n        this._isAborted = true;\n        if (this.onabort) {\n          this.onabort();\n        }\n      }\n    }\n  }, {\n    key: \"signal\",\n    get: function get() {\n      return this;\n    }\n  }, {\n    key: \"aborted\",\n    get: function get() {\n      return this._isAborted;\n    }\n  }]);\n  return AbortController;\n}();","map":{"version":3,"names":["AbortController","_classCallCheck","_isAborted","onabort","_createClass","key","value","abort","get"],"sources":["/home/nico/expero/toolkit/signalR-test/client/node_modules/@microsoft/signalr/src/AbortController.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort(): void {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA,WAAaA,eAAe;EAA5B,SAAAA,gBAAA;IAAAC,eAAA,OAAAD,eAAA;IACY,KAAAE,UAAU,GAAY,KAAK;IAC5B,KAAAC,OAAO,GAAwB,IAAI;EAkB9C;EAACC,YAAA,CAAAJ,eAAA;IAAAK,GAAA;IAAAC,KAAA,EAhBU,SAAAC,MAAA,EAAK;MACR,IAAI,CAAC,IAAI,CAACL,UAAU,EAAE;QAClB,IAAI,CAACA,UAAU,GAAG,IAAI;QACtB,IAAI,IAAI,CAACC,OAAO,EAAE;UACd,IAAI,CAACA,OAAO,EAAE;;;IAG1B;EAAC;IAAAE,GAAA;IAAAG,GAAA,EAED,SAAAA,IAAA,EAAU;MACN,OAAO,IAAI;IACf;EAAC;IAAAH,GAAA;IAAAG,GAAA,EAED,SAAAA,IAAA,EAAW;MACP,OAAO,IAAI,CAACN,UAAU;IAC1B;EAAC;EAAA,OAAAF,eAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}