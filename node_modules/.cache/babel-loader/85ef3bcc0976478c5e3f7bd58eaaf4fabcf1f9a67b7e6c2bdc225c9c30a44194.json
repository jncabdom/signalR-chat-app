{"ast":null,"code":"import _objectSpread from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { LogLevel } from \"./ILogger\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\nvar LogLevelNameMapping = {\n  trace: LogLevel.Trace,\n  debug: LogLevel.Debug,\n  info: LogLevel.Information,\n  information: LogLevel.Information,\n  warn: LogLevel.Warning,\n  warning: LogLevel.Warning,\n  error: LogLevel.Error,\n  critical: LogLevel.Critical,\n  none: LogLevel.None\n};\nfunction parseLogLevel(name) {\n  // Case-insensitive matching via lower-casing\n  // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n  // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n  var mapping = LogLevelNameMapping[name.toLowerCase()];\n  if (typeof mapping !== \"undefined\") {\n    return mapping;\n  } else {\n    throw new Error(\"Unknown log level: \".concat(name));\n  }\n}\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\nexport var HubConnectionBuilder = /*#__PURE__*/function () {\n  function HubConnectionBuilder() {\n    _classCallCheck(this, HubConnectionBuilder);\n  }\n  _createClass(HubConnectionBuilder, [{\n    key: \"configureLogging\",\n    value: function configureLogging(logging) {\n      Arg.isRequired(logging, \"logging\");\n      if (isLogger(logging)) {\n        this.logger = logging;\n      } else if (typeof logging === \"string\") {\n        var logLevel = parseLogLevel(logging);\n        this.logger = new ConsoleLogger(logLevel);\n      } else {\n        this.logger = new ConsoleLogger(logging);\n      }\n      return this;\n    }\n  }, {\n    key: \"withUrl\",\n    value: function withUrl(url, transportTypeOrOptions) {\n      Arg.isRequired(url, \"url\");\n      Arg.isNotEmpty(url, \"url\");\n      this.url = url;\n      // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n      // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n      if (typeof transportTypeOrOptions === \"object\") {\n        this.httpConnectionOptions = _objectSpread(_objectSpread({}, this.httpConnectionOptions), transportTypeOrOptions);\n      } else {\n        this.httpConnectionOptions = _objectSpread(_objectSpread({}, this.httpConnectionOptions), {}, {\n          transport: transportTypeOrOptions\n        });\n      }\n      return this;\n    }\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\n  }, {\n    key: \"withHubProtocol\",\n    value: function withHubProtocol(protocol) {\n      Arg.isRequired(protocol, \"protocol\");\n      this.protocol = protocol;\n      return this;\n    }\n  }, {\n    key: \"withAutomaticReconnect\",\n    value: function withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\n      if (this.reconnectPolicy) {\n        throw new Error(\"A reconnectPolicy has already been set.\");\n      }\n      if (!retryDelaysOrReconnectPolicy) {\n        this.reconnectPolicy = new DefaultReconnectPolicy();\n      } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n        this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n      } else {\n        this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n      }\n      return this;\n    }\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n      // provided to configureLogger\n      var httpConnectionOptions = this.httpConnectionOptions || {};\n      // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n      if (httpConnectionOptions.logger === undefined) {\n        // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n        httpConnectionOptions.logger = this.logger;\n      }\n      // Now create the connection\n      if (!this.url) {\n        throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n      }\n      var connection = new HttpConnection(this.url, httpConnectionOptions);\n      return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\n    }\n  }]);\n  return HubConnectionBuilder;\n}();\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"names":["DefaultReconnectPolicy","HttpConnection","HubConnection","LogLevel","JsonHubProtocol","NullLogger","Arg","ConsoleLogger","LogLevelNameMapping","trace","Trace","debug","Debug","info","Information","information","warn","Warning","warning","error","Error","critical","Critical","none","None","parseLogLevel","name","mapping","toLowerCase","concat","HubConnectionBuilder","_classCallCheck","_createClass","key","value","configureLogging","logging","isRequired","isLogger","logger","logLevel","withUrl","url","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","_objectSpread","transport","withHubProtocol","protocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","reconnectPolicy","Array","isArray","build","undefined","connection","create","instance","log"],"sources":["/home/nico/expero/toolkit/signalR-test/client/node_modules/@microsoft/signalr/src/HubConnectionBuilder.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\nconst LogLevelNameMapping: {[k: string]: LogLevel} = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}