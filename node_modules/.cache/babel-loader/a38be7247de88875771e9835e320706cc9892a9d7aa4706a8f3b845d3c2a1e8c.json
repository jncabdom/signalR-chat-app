{"ast":null,"code":"import _classCallCheck from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\nimport { isArrayBuffer } from \"./Utils\";\nexport var XhrHttpClient = /*#__PURE__*/function (_HttpClient) {\n  _inherits(XhrHttpClient, _HttpClient);\n  var _super = _createSuper(XhrHttpClient);\n  function XhrHttpClient(logger) {\n    var _this;\n    _classCallCheck(this, XhrHttpClient);\n    _this = _super.call(this);\n    _this._logger = logger;\n    return _this;\n  }\n  /** @inheritDoc */\n  _createClass(XhrHttpClient, [{\n    key: \"send\",\n    value: function send(request) {\n      var _this2 = this;\n      // Check that abort was not signaled before calling send\n      if (request.abortSignal && request.abortSignal.aborted) {\n        return Promise.reject(new AbortError());\n      }\n      if (!request.method) {\n        return Promise.reject(new Error(\"No method defined.\"));\n      }\n      if (!request.url) {\n        return Promise.reject(new Error(\"No url defined.\"));\n      }\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(request.method, request.url, true);\n        xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        if (request.content === \"\") {\n          request.content = undefined;\n        }\n        if (request.content) {\n          // Explicitly setting the Content-Type header for React Native on Android platform.\n          if (isArrayBuffer(request.content)) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n          } else {\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n          }\n        }\n        var headers = request.headers;\n        if (headers) {\n          Object.keys(headers).forEach(function (header) {\n            xhr.setRequestHeader(header, headers[header]);\n          });\n        }\n        if (request.responseType) {\n          xhr.responseType = request.responseType;\n        }\n        if (request.abortSignal) {\n          request.abortSignal.onabort = function () {\n            xhr.abort();\n            reject(new AbortError());\n          };\n        }\n        if (request.timeout) {\n          xhr.timeout = request.timeout;\n        }\n        xhr.onload = function () {\n          if (request.abortSignal) {\n            request.abortSignal.onabort = null;\n          }\n          if (xhr.status >= 200 && xhr.status < 300) {\n            resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n          } else {\n            reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\n          }\n        };\n        xhr.onerror = function () {\n          _this2._logger.log(LogLevel.Warning, \"Error from HTTP request. \".concat(xhr.status, \": \").concat(xhr.statusText, \".\"));\n          reject(new HttpError(xhr.statusText, xhr.status));\n        };\n        xhr.ontimeout = function () {\n          _this2._logger.log(LogLevel.Warning, \"Timeout from HTTP request.\");\n          reject(new TimeoutError());\n        };\n        xhr.send(request.content);\n      });\n    }\n  }]);\n  return XhrHttpClient;\n}(HttpClient);","map":{"version":3,"names":["AbortError","HttpError","TimeoutError","HttpClient","HttpResponse","LogLevel","isArrayBuffer","XhrHttpClient","_HttpClient","_inherits","_super","_createSuper","logger","_this","_classCallCheck","call","_logger","_createClass","key","value","send","request","_this2","abortSignal","aborted","Promise","reject","method","Error","url","resolve","xhr","XMLHttpRequest","open","withCredentials","undefined","setRequestHeader","content","headers","Object","keys","forEach","header","responseType","onabort","abort","timeout","onload","status","statusText","response","responseText","onerror","log","Warning","concat","ontimeout"],"sources":["/home/nico/expero/toolkit/signalR-test/client/node_modules/@microsoft/signalr/src/XhrHttpClient.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            if (request.content === \"\") {\r\n                request.content = undefined;\r\n            }\r\n            if (request.content) {\r\n                // Explicitly setting the Content-Type header for React Native on Android platform.\r\n                if (isArrayBuffer(request.content)) {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\r\n                } else {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n            }\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content);\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}