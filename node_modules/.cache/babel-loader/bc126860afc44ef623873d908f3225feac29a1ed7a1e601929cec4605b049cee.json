{"ast":null,"code":"import _regeneratorRuntime from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _defineProperty from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\n// Not exported from 'index', this type is internal.\n/** @private */\nexport var LongPollingTransport = /*#__PURE__*/function () {\n  function LongPollingTransport(httpClient, logger, options) {\n    _classCallCheck(this, LongPollingTransport);\n    this._httpClient = httpClient;\n    this._logger = logger;\n    this._pollAbort = new AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n  // This is an internal type, not exported from 'index' so this is really just internal.\n  _createClass(LongPollingTransport, [{\n    key: \"pollAborted\",\n    get: function get() {\n      return this._pollAbort.aborted;\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, transferFormat) {\n        var _getUserAgentHeader, _getUserAgentHeader2, name, value, headers, pollOptions, pollUrl, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              Arg.isRequired(url, \"url\");\n              Arg.isRequired(transferFormat, \"transferFormat\");\n              Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n              this._url = url;\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\n              // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n              if (!(transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\n                _context.next = 7;\n                break;\n              }\n              throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n            case 7:\n              _getUserAgentHeader = getUserAgentHeader(), _getUserAgentHeader2 = _slicedToArray(_getUserAgentHeader, 2), name = _getUserAgentHeader2[0], value = _getUserAgentHeader2[1];\n              headers = _objectSpread(_defineProperty({}, name, value), this._options.headers);\n              pollOptions = {\n                abortSignal: this._pollAbort.signal,\n                headers: headers,\n                timeout: 100000,\n                withCredentials: this._options.withCredentials\n              };\n              if (transferFormat === TransferFormat.Binary) {\n                pollOptions.responseType = \"arraybuffer\";\n              }\n              // Make initial long polling request\n              // Server uses first long polling request to finish initializing connection and it returns without data\n              pollUrl = \"\".concat(url, \"&_=\").concat(Date.now());\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \".concat(pollUrl, \".\"));\n              _context.next = 15;\n              return this._httpClient.get(pollUrl, pollOptions);\n            case 15:\n              response = _context.sent;\n              if (response.statusCode !== 200) {\n                this._logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \".concat(response.statusCode, \".\"));\n                // Mark running as false so that the poll immediately ends and runs the close logic\n                this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n                this._running = false;\n              } else {\n                this._running = true;\n              }\n              this._receiving = this._poll(this._url, pollOptions);\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function connect(_x, _x2) {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }, {\n    key: \"_poll\",\n    value: function () {\n      var _poll2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, pollOptions) {\n        var pollUrl, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n            case 1:\n              if (!this._running) {\n                _context2.next = 16;\n                break;\n              }\n              _context2.prev = 2;\n              pollUrl = \"\".concat(url, \"&_=\").concat(Date.now());\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \".concat(pollUrl, \".\"));\n              _context2.next = 7;\n              return this._httpClient.get(pollUrl, pollOptions);\n            case 7:\n              response = _context2.sent;\n              if (response.statusCode === 204) {\n                this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n                this._running = false;\n              } else if (response.statusCode !== 200) {\n                this._logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \".concat(response.statusCode, \".\"));\n                // Unexpected status code\n                this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n                this._running = false;\n              } else {\n                // Process the response\n                if (response.content) {\n                  this._logger.log(LogLevel.Trace, \"(LongPolling transport) data received. \".concat(getDataDetail(response.content, this._options.logMessageContent), \".\"));\n                  if (this.onreceive) {\n                    this.onreceive(response.content);\n                  }\n                } else {\n                  // This is another way timeout manifest.\n                  this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                }\n              }\n              _context2.next = 14;\n              break;\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](2);\n              if (!this._running) {\n                // Log but disregard errors that occur after stopping\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll errored after shutdown: \".concat(_context2.t0.message));\n              } else {\n                if (_context2.t0 instanceof TimeoutError) {\n                  // Ignore timeouts and reissue the poll.\n                  this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                } else {\n                  // Close the connection with the error as the result.\n                  this._closeError = _context2.t0;\n                  this._running = false;\n                }\n              }\n            case 14:\n              _context2.next = 1;\n              break;\n            case 16:\n              _context2.prev = 16;\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\n              // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n              // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n              if (!this.pollAborted) {\n                this._raiseOnClose();\n              }\n              return _context2.finish(16);\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0,, 16, 20], [2, 11]]);\n      }));\n      function _poll(_x3, _x4) {\n        return _poll2.apply(this, arguments);\n      }\n      return _poll;\n    }()\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this._running) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\", Promise.reject(new Error(\"Cannot send until the transport is connected\")));\n            case 2:\n              return _context3.abrupt(\"return\", sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options));\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function send(_x5) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var headers, _getUserAgentHeader3, _getUserAgentHeader4, name, value, deleteOptions;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\n              // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n              this._running = false;\n              this._pollAbort.abort();\n              _context4.prev = 3;\n              _context4.next = 6;\n              return this._receiving;\n            case 6:\n              // Send DELETE to clean up long polling on the server\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) sending DELETE request to \".concat(this._url, \".\"));\n              headers = {};\n              _getUserAgentHeader3 = getUserAgentHeader(), _getUserAgentHeader4 = _slicedToArray(_getUserAgentHeader3, 2), name = _getUserAgentHeader4[0], value = _getUserAgentHeader4[1];\n              headers[name] = value;\n              deleteOptions = {\n                headers: _objectSpread(_objectSpread({}, headers), this._options.headers),\n                timeout: this._options.timeout,\n                withCredentials: this._options.withCredentials\n              };\n              _context4.next = 13;\n              return this._httpClient.delete(this._url, deleteOptions);\n            case 13:\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n            case 14:\n              _context4.prev = 14;\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\n              // Raise close event here instead of in polling\n              // It needs to happen after the DELETE request is sent\n              this._raiseOnClose();\n              return _context4.finish(14);\n            case 18:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[3,, 14, 18]]);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n  }, {\n    key: \"_raiseOnClose\",\n    value: function _raiseOnClose() {\n      if (this.onclose) {\n        var logMessage = \"(LongPolling transport) Firing onclose event.\";\n        if (this._closeError) {\n          logMessage += \" Error: \" + this._closeError;\n        }\n        this._logger.log(LogLevel.Trace, logMessage);\n        this.onclose(this._closeError);\n      }\n    }\n  }]);\n  return LongPollingTransport;\n}();","map":{"version":3,"names":["AbortController","HttpError","TimeoutError","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","sendMessage","LongPollingTransport","httpClient","logger","options","_classCallCheck","_httpClient","_logger","_pollAbort","_options","_running","onreceive","onclose","_createClass","key","get","aborted","value","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","transferFormat","_getUserAgentHeader","_getUserAgentHeader2","name","headers","pollOptions","pollUrl","response","wrap","_callee$","_context","prev","next","isRequired","isIn","_url","log","Trace","Binary","XMLHttpRequest","responseType","Error","_slicedToArray","_objectSpread","_defineProperty","abortSignal","signal","timeout","withCredentials","concat","Date","now","sent","statusCode","_closeError","statusText","_receiving","_poll","stop","connect","_x","_x2","apply","arguments","_poll2","_callee2","_callee2$","_context2","Information","content","logMessageContent","t0","message","pollAborted","_raiseOnClose","finish","_x3","_x4","_send","_callee3","data","_callee3$","_context3","abrupt","Promise","reject","send","_x5","_stop","_callee4","_getUserAgentHeader3","_getUserAgentHeader4","deleteOptions","_callee4$","_context4","abort","delete","logMessage"],"sources":["/home/nico/expero/toolkit/signalR-test/client/node_modules/@microsoft/signalr/src/LongPollingTransport.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}