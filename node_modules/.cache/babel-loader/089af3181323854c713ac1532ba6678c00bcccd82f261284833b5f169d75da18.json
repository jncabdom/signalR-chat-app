{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\nimport { AbortError } from \"./Errors\";\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { Subject } from \"./Subject\";\nimport { Arg, getErrorString, Platform } from \"./Utils\";\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\n/** Describes the current state of the {@link HubConnection} to the server. */\nexport var HubConnectionState;\n(function (HubConnectionState) {\n  /** The hub connection is disconnected. */\n  HubConnectionState[\"Disconnected\"] = \"Disconnected\";\n  /** The hub connection is connecting. */\n  HubConnectionState[\"Connecting\"] = \"Connecting\";\n  /** The hub connection is connected. */\n  HubConnectionState[\"Connected\"] = \"Connected\";\n  /** The hub connection is disconnecting. */\n  HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\n  /** The hub connection is reconnecting. */\n  HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\n})(HubConnectionState || (HubConnectionState = {}));\n/** Represents a connection to a SignalR Hub. */\nexport class HubConnection {\n  constructor(connection, logger, protocol, reconnectPolicy) {\n    this._nextKeepAlive = 0;\n    this._freezeEventListener = () => {\n      this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\n    };\n    Arg.isRequired(connection, \"connection\");\n    Arg.isRequired(logger, \"logger\");\n    Arg.isRequired(protocol, \"protocol\");\n    this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\n    this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\n    this._logger = logger;\n    this._protocol = protocol;\n    this.connection = connection;\n    this._reconnectPolicy = reconnectPolicy;\n    this._handshakeProtocol = new HandshakeProtocol();\n    this.connection.onreceive = data => this._processIncomingData(data);\n    this.connection.onclose = error => this._connectionClosed(error);\n    this._callbacks = {};\n    this._methods = {};\n    this._closedCallbacks = [];\n    this._reconnectingCallbacks = [];\n    this._reconnectedCallbacks = [];\n    this._invocationId = 0;\n    this._receivedHandshakeResponse = false;\n    this._connectionState = HubConnectionState.Disconnected;\n    this._connectionStarted = false;\n    this._cachedPingMessage = this._protocol.writeMessage({\n      type: MessageType.Ping\n    });\n  }\n  /** @internal */\n  // Using a public static factory method means we can have a private constructor and an _internal_\n  // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\n  // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\n  // public parameter-less constructor.\n  static create(connection, logger, protocol, reconnectPolicy) {\n    return new HubConnection(connection, logger, protocol, reconnectPolicy);\n  }\n  /** Indicates the state of the {@link HubConnection} to the server. */\n  get state() {\n    return this._connectionState;\n  }\n  /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n   *  in the disconnected state or if the negotiation step was skipped.\r\n   */\n  get connectionId() {\n    return this.connection ? this.connection.connectionId || null : null;\n  }\n  /** Indicates the url of the {@link HubConnection} to the server. */\n  get baseUrl() {\n    return this.connection.baseUrl || \"\";\n  }\n  /**\r\n   * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n   * Reconnecting states.\r\n   * @param {string} url The url to connect to.\r\n   */\n  set baseUrl(url) {\n    if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\n      throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\n    }\n    if (!url) {\n      throw new Error(\"The HubConnection url must be a valid url.\");\n    }\n    this.connection.baseUrl = url;\n  }\n  /** Starts the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n   */\n  start() {\n    this._startPromise = this._startWithStateTransitions();\n    return this._startPromise;\n  }\n  async _startWithStateTransitions() {\n    if (this._connectionState !== HubConnectionState.Disconnected) {\n      return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\n    }\n    this._connectionState = HubConnectionState.Connecting;\n    this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\n    try {\n      await this._startInternal();\n      if (Platform.isBrowser) {\n        // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\n        window.document.addEventListener(\"freeze\", this._freezeEventListener);\n      }\n      this._connectionState = HubConnectionState.Connected;\n      this._connectionStarted = true;\n      this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\n    } catch (e) {\n      this._connectionState = HubConnectionState.Disconnected;\n      this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\n      return Promise.reject(e);\n    }\n  }\n  async _startInternal() {\n    this._stopDuringStartError = undefined;\n    this._receivedHandshakeResponse = false;\n    // Set up the promise before any connection is (re)started otherwise it could race with received messages\n    const handshakePromise = new Promise((resolve, reject) => {\n      this._handshakeResolver = resolve;\n      this._handshakeRejecter = reject;\n    });\n    await this.connection.start(this._protocol.transferFormat);\n    try {\n      const handshakeRequest = {\n        protocol: this._protocol.name,\n        version: this._protocol.version\n      };\n      this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\n      await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\n      this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\n      // defensively cleanup timeout in case we receive a message from the server before we finish start\n      this._cleanupTimeout();\n      this._resetTimeoutPeriod();\n      this._resetKeepAliveInterval();\n      await handshakePromise;\n      // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\n      // being rejected on close, because this continuation can run after both the handshake completed successfully\n      // and the connection was closed.\n      if (this._stopDuringStartError) {\n        // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\n        // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\n        // will cause the calling continuation to get scheduled to run later.\n        // eslint-disable-next-line @typescript-eslint/no-throw-literal\n        throw this._stopDuringStartError;\n      }\n      if (!this.connection.features.inherentKeepAlive) {\n        await this._sendMessage(this._cachedPingMessage);\n      }\n    } catch (e) {\n      this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\n      this._cleanupTimeout();\n      this._cleanupPingTimer();\n      // HttpConnection.stop() should not complete until after the onclose callback is invoked.\n      // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\n      await this.connection.stop(e);\n      throw e;\n    }\n  }\n  /** Stops the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n   */\n  async stop() {\n    // Capture the start promise before the connection might be restarted in an onclose callback.\n    const startPromise = this._startPromise;\n    this._stopPromise = this._stopInternal();\n    await this._stopPromise;\n    try {\n      // Awaiting undefined continues immediately\n      await startPromise;\n    } catch (e) {\n      // This exception is returned to the user as a rejected Promise from the start method.\n    }\n  }\n  _stopInternal(error) {\n    if (this._connectionState === HubConnectionState.Disconnected) {\n      this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\n      return Promise.resolve();\n    }\n    if (this._connectionState === HubConnectionState.Disconnecting) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n      return this._stopPromise;\n    }\n    this._connectionState = HubConnectionState.Disconnecting;\n    this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\n    if (this._reconnectDelayHandle) {\n      // We're in a reconnect delay which means the underlying connection is currently already stopped.\n      // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\n      // fire the onclose callbacks.\n      this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\n      clearTimeout(this._reconnectDelayHandle);\n      this._reconnectDelayHandle = undefined;\n      this._completeClose();\n      return Promise.resolve();\n    }\n    this._cleanupTimeout();\n    this._cleanupPingTimer();\n    this._stopDuringStartError = error || new AbortError(\"The connection was stopped before the hub handshake could complete.\");\n    // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\n    // or the onclose callback is invoked. The onclose callback will transition the HubConnection\n    // to the disconnected state if need be before HttpConnection.stop() completes.\n    return this.connection.stop(error);\n  }\n  /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n   *\r\n   * @typeparam T The type of the items returned by the server.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n   */\n  stream(methodName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n    const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\n    // eslint-disable-next-line prefer-const\n    let promiseQueue;\n    const subject = new Subject();\n    subject.cancelCallback = () => {\n      const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\n      delete this._callbacks[invocationDescriptor.invocationId];\n      return promiseQueue.then(() => {\n        return this._sendWithProtocol(cancelInvocation);\n      });\n    };\n    this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\n      if (error) {\n        subject.error(error);\n        return;\n      } else if (invocationEvent) {\n        // invocationEvent will not be null when an error is not passed to the callback\n        if (invocationEvent.type === MessageType.Completion) {\n          if (invocationEvent.error) {\n            subject.error(new Error(invocationEvent.error));\n          } else {\n            subject.complete();\n          }\n        } else {\n          subject.next(invocationEvent.item);\n        }\n      }\n    };\n    promiseQueue = this._sendWithProtocol(invocationDescriptor).catch(e => {\n      subject.error(e);\n      delete this._callbacks[invocationDescriptor.invocationId];\n    });\n    this._launchStreams(streams, promiseQueue);\n    return subject;\n  }\n  _sendMessage(message) {\n    this._resetKeepAliveInterval();\n    return this.connection.send(message);\n  }\n  /**\r\n   * Sends a js object to the server.\r\n   * @param message The js object to serialize and send.\r\n   */\n  _sendWithProtocol(message) {\n    return this._sendMessage(this._protocol.writeMessage(message));\n  }\n  /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n   *\r\n   * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n   * be processing the invocation.\r\n   *\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n   */\n  send(methodName) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n    const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\n    this._launchStreams(streams, sendPromise);\n    return sendPromise;\n  }\n  /** Invokes a hub method on the server using the specified name and arguments.\r\n   *\r\n   * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n   * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n   * resolving the Promise.\r\n   *\r\n   * @typeparam T The expected return type.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n   */\n  invoke(methodName) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n    const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\n    const p = new Promise((resolve, reject) => {\n      // invocationId will always have a value for a non-blocking invocation\n      this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\n        if (error) {\n          reject(error);\n          return;\n        } else if (invocationEvent) {\n          // invocationEvent will not be null when an error is not passed to the callback\n          if (invocationEvent.type === MessageType.Completion) {\n            if (invocationEvent.error) {\n              reject(new Error(invocationEvent.error));\n            } else {\n              resolve(invocationEvent.result);\n            }\n          } else {\n            reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\n          }\n        }\n      };\n      const promiseQueue = this._sendWithProtocol(invocationDescriptor).catch(e => {\n        reject(e);\n        // invocationId will always have a value for a non-blocking invocation\n        delete this._callbacks[invocationDescriptor.invocationId];\n      });\n      this._launchStreams(streams, promiseQueue);\n    });\n    return p;\n  }\n  on(methodName, newMethod) {\n    if (!methodName || !newMethod) {\n      return;\n    }\n    methodName = methodName.toLowerCase();\n    if (!this._methods[methodName]) {\n      this._methods[methodName] = [];\n    }\n    // Preventing adding the same handler multiple times.\n    if (this._methods[methodName].indexOf(newMethod) !== -1) {\n      return;\n    }\n    this._methods[methodName].push(newMethod);\n  }\n  off(methodName, method) {\n    if (!methodName) {\n      return;\n    }\n    methodName = methodName.toLowerCase();\n    const handlers = this._methods[methodName];\n    if (!handlers) {\n      return;\n    }\n    if (method) {\n      const removeIdx = handlers.indexOf(method);\n      if (removeIdx !== -1) {\n        handlers.splice(removeIdx, 1);\n        if (handlers.length === 0) {\n          delete this._methods[methodName];\n        }\n      }\n    } else {\n      delete this._methods[methodName];\n    }\n  }\n  /** Registers a handler that will be invoked when the connection is closed.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n   */\n  onclose(callback) {\n    if (callback) {\n      this._closedCallbacks.push(callback);\n    }\n  }\n  /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n   */\n  onreconnecting(callback) {\n    if (callback) {\n      this._reconnectingCallbacks.push(callback);\n    }\n  }\n  /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n   */\n  onreconnected(callback) {\n    if (callback) {\n      this._reconnectedCallbacks.push(callback);\n    }\n  }\n  _processIncomingData(data) {\n    this._cleanupTimeout();\n    if (!this._receivedHandshakeResponse) {\n      data = this._processHandshakeResponse(data);\n      this._receivedHandshakeResponse = true;\n    }\n    // Data may have all been read when processing handshake response\n    if (data) {\n      // Parse the messages\n      const messages = this._protocol.parseMessages(data, this._logger);\n      for (const message of messages) {\n        switch (message.type) {\n          case MessageType.Invocation:\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._invokeClientMethod(message);\n            break;\n          case MessageType.StreamItem:\n          case MessageType.Completion:\n            {\n              const callback = this._callbacks[message.invocationId];\n              if (callback) {\n                if (message.type === MessageType.Completion) {\n                  delete this._callbacks[message.invocationId];\n                }\n                try {\n                  callback(message);\n                } catch (e) {\n                  this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\n                }\n              }\n              break;\n            }\n          case MessageType.Ping:\n            // Don't care about pings\n            break;\n          case MessageType.Close:\n            {\n              this._logger.log(LogLevel.Information, \"Close message received from server.\");\n              const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\n              if (message.allowReconnect === true) {\n                // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\n                // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.connection.stop(error);\n              } else {\n                // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\n                this._stopPromise = this._stopInternal(error);\n              }\n              break;\n            }\n          default:\n            this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\n            break;\n        }\n      }\n    }\n    this._resetTimeoutPeriod();\n  }\n  _processHandshakeResponse(data) {\n    let responseMessage;\n    let remainingData;\n    try {\n      [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\n    } catch (e) {\n      const message = \"Error parsing handshake response: \" + e;\n      this._logger.log(LogLevel.Error, message);\n      const error = new Error(message);\n      this._handshakeRejecter(error);\n      throw error;\n    }\n    if (responseMessage.error) {\n      const message = \"Server returned handshake error: \" + responseMessage.error;\n      this._logger.log(LogLevel.Error, message);\n      const error = new Error(message);\n      this._handshakeRejecter(error);\n      throw error;\n    } else {\n      this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\n    }\n    this._handshakeResolver();\n    return remainingData;\n  }\n  _resetKeepAliveInterval() {\n    if (this.connection.features.inherentKeepAlive) {\n      return;\n    }\n    // Set the time we want the next keep alive to be sent\n    // Timer will be setup on next message receive\n    this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\n    this._cleanupPingTimer();\n  }\n  _resetTimeoutPeriod() {\n    if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n      // Set the timeout timer\n      this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\n      // Set keepAlive timer if there isn't one\n      if (this._pingServerHandle === undefined) {\n        let nextPing = this._nextKeepAlive - new Date().getTime();\n        if (nextPing < 0) {\n          nextPing = 0;\n        }\n        // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\n        this._pingServerHandle = setTimeout(async () => {\n          if (this._connectionState === HubConnectionState.Connected) {\n            try {\n              await this._sendMessage(this._cachedPingMessage);\n            } catch {\n              // We don't care about the error. It should be seen elsewhere in the client.\n              // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\n              this._cleanupPingTimer();\n            }\n          }\n        }, nextPing);\n      }\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  serverTimeout() {\n    // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n    // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n  }\n  async _invokeClientMethod(invocationMessage) {\n    const methodName = invocationMessage.target.toLowerCase();\n    const methods = this._methods[methodName];\n    if (!methods) {\n      this._logger.log(LogLevel.Warning, `No client method with the name '${methodName}' found.`);\n      // No handlers provided by client but the server is expecting a response still, so we send an error\n      if (invocationMessage.invocationId) {\n        this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\n        await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\n      }\n      return;\n    }\n    // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\n    const methodsCopy = methods.slice();\n    // Server expects a response\n    const expectsResponse = invocationMessage.invocationId ? true : false;\n    // We preserve the last result or exception but still call all handlers\n    let res;\n    let exception;\n    let completionMessage;\n    for (const m of methodsCopy) {\n      try {\n        const prevRes = res;\n        res = await m.apply(this, invocationMessage.arguments);\n        if (expectsResponse && res && prevRes) {\n          this._logger.log(LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\n          completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `Client provided multiple results.`, null);\n        }\n        // Ignore exception if we got a result after, the exception will be logged\n        exception = undefined;\n      } catch (e) {\n        exception = e;\n        this._logger.log(LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\n      }\n    }\n    if (completionMessage) {\n      await this._sendWithProtocol(completionMessage);\n    } else if (expectsResponse) {\n      // If there is an exception that means either no result was given or a handler after a result threw\n      if (exception) {\n        completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `${exception}`, null);\n      } else if (res !== undefined) {\n        completionMessage = this._createCompletionMessage(invocationMessage.invocationId, null, res);\n      } else {\n        this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\n        // Client didn't provide a result or throw from a handler, server expects a response so we send an error\n        completionMessage = this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null);\n      }\n      await this._sendWithProtocol(completionMessage);\n    } else {\n      if (res) {\n        this._logger.log(LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\n      }\n    }\n  }\n  _connectionClosed(error) {\n    this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\n    // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\n    this._stopDuringStartError = this._stopDuringStartError || error || new AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\n    // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\n    // If it has already completed, this should just noop.\n    if (this._handshakeResolver) {\n      this._handshakeResolver();\n    }\n    this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\n    this._cleanupTimeout();\n    this._cleanupPingTimer();\n    if (this._connectionState === HubConnectionState.Disconnecting) {\n      this._completeClose(error);\n    } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._reconnect(error);\n    } else if (this._connectionState === HubConnectionState.Connected) {\n      this._completeClose(error);\n    }\n    // If none of the above if conditions were true were called the HubConnection must be in either:\n    // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\n    // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\n    //    and potentially continue the reconnect() loop.\n    // 3. The Disconnected state in which case we're already done.\n  }\n\n  _completeClose(error) {\n    if (this._connectionStarted) {\n      this._connectionState = HubConnectionState.Disconnected;\n      this._connectionStarted = false;\n      if (Platform.isBrowser) {\n        window.document.removeEventListener(\"freeze\", this._freezeEventListener);\n      }\n      try {\n        this._closedCallbacks.forEach(c => c.apply(this, [error]));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\n      }\n    }\n  }\n  async _reconnect(error) {\n    const reconnectStartTime = Date.now();\n    let previousReconnectAttempts = 0;\n    let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\n    let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\n    if (nextRetryDelay === null) {\n      this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\n      this._completeClose(error);\n      return;\n    }\n    this._connectionState = HubConnectionState.Reconnecting;\n    if (error) {\n      this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\n    } else {\n      this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\n    }\n    if (this._reconnectingCallbacks.length !== 0) {\n      try {\n        this._reconnectingCallbacks.forEach(c => c.apply(this, [error]));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\n      }\n      // Exit early if an onreconnecting callback called connection.stop().\n      if (this._connectionState !== HubConnectionState.Reconnecting) {\n        this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\n        return;\n      }\n    }\n    while (nextRetryDelay !== null) {\n      this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\n      await new Promise(resolve => {\n        this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\n      });\n      this._reconnectDelayHandle = undefined;\n      if (this._connectionState !== HubConnectionState.Reconnecting) {\n        this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\n        return;\n      }\n      try {\n        await this._startInternal();\n        this._connectionState = HubConnectionState.Connected;\n        this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\n        if (this._reconnectedCallbacks.length !== 0) {\n          try {\n            this._reconnectedCallbacks.forEach(c => c.apply(this, [this.connection.connectionId]));\n          } catch (e) {\n            this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\n          }\n        }\n        return;\n      } catch (e) {\n        this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\n        if (this._connectionState !== HubConnectionState.Reconnecting) {\n          this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\n          // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\n          if (this._connectionState === HubConnectionState.Disconnecting) {\n            this._completeClose();\n          }\n          return;\n        }\n        retryError = e instanceof Error ? e : new Error(e.toString());\n        nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\n      }\n    }\n    this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\n    this._completeClose();\n  }\n  _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\n    try {\n      return this._reconnectPolicy.nextRetryDelayInMilliseconds({\n        elapsedMilliseconds,\n        previousRetryCount,\n        retryReason\n      });\n    } catch (e) {\n      this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\n      return null;\n    }\n  }\n  _cancelCallbacksWithError(error) {\n    const callbacks = this._callbacks;\n    this._callbacks = {};\n    Object.keys(callbacks).forEach(key => {\n      const callback = callbacks[key];\n      try {\n        callback(null, error);\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\n      }\n    });\n  }\n  _cleanupPingTimer() {\n    if (this._pingServerHandle) {\n      clearTimeout(this._pingServerHandle);\n      this._pingServerHandle = undefined;\n    }\n  }\n  _cleanupTimeout() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n  _createInvocation(methodName, args, nonblocking, streamIds) {\n    if (nonblocking) {\n      if (streamIds.length !== 0) {\n        return {\n          arguments: args,\n          streamIds,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      } else {\n        return {\n          arguments: args,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      }\n    } else {\n      const invocationId = this._invocationId;\n      this._invocationId++;\n      if (streamIds.length !== 0) {\n        return {\n          arguments: args,\n          invocationId: invocationId.toString(),\n          streamIds,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      } else {\n        return {\n          arguments: args,\n          invocationId: invocationId.toString(),\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      }\n    }\n  }\n  _launchStreams(streams, promiseQueue) {\n    if (streams.length === 0) {\n      return;\n    }\n    // Synchronize stream data so they arrive in-order on the server\n    if (!promiseQueue) {\n      promiseQueue = Promise.resolve();\n    }\n    // We want to iterate over the keys, since the keys are the stream ids\n    // eslint-disable-next-line guard-for-in\n    for (const streamId in streams) {\n      streams[streamId].subscribe({\n        complete: () => {\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\n        },\n        error: err => {\n          let message;\n          if (err instanceof Error) {\n            message = err.message;\n          } else if (err && err.toString) {\n            message = err.toString();\n          } else {\n            message = \"Unknown error\";\n          }\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\n        },\n        next: item => {\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\n        }\n      });\n    }\n  }\n  _replaceStreamingParams(args) {\n    const streams = [];\n    const streamIds = [];\n    for (let i = 0; i < args.length; i++) {\n      const argument = args[i];\n      if (this._isObservable(argument)) {\n        const streamId = this._invocationId;\n        this._invocationId++;\n        // Store the stream for later use\n        streams[streamId] = argument;\n        streamIds.push(streamId.toString());\n        // remove stream from args\n        args.splice(i, 1);\n      }\n    }\n    return [streams, streamIds];\n  }\n  _isObservable(arg) {\n    // This allows other stream implementations to just work (like rxjs)\n    return arg && arg.subscribe && typeof arg.subscribe === \"function\";\n  }\n  _createStreamInvocation(methodName, args, streamIds) {\n    const invocationId = this._invocationId;\n    this._invocationId++;\n    if (streamIds.length !== 0) {\n      return {\n        arguments: args,\n        invocationId: invocationId.toString(),\n        streamIds,\n        target: methodName,\n        type: MessageType.StreamInvocation\n      };\n    } else {\n      return {\n        arguments: args,\n        invocationId: invocationId.toString(),\n        target: methodName,\n        type: MessageType.StreamInvocation\n      };\n    }\n  }\n  _createCancelInvocation(id) {\n    return {\n      invocationId: id,\n      type: MessageType.CancelInvocation\n    };\n  }\n  _createStreamItemMessage(id, item) {\n    return {\n      invocationId: id,\n      item,\n      type: MessageType.StreamItem\n    };\n  }\n  _createCompletionMessage(id, error, result) {\n    if (error) {\n      return {\n        error,\n        invocationId: id,\n        type: MessageType.Completion\n      };\n    }\n    return {\n      invocationId: id,\n      result,\n      type: MessageType.Completion\n    };\n  }\n}","map":{"version":3,"names":["HandshakeProtocol","AbortError","MessageType","LogLevel","Subject","Arg","getErrorString","Platform","DEFAULT_TIMEOUT_IN_MS","DEFAULT_PING_INTERVAL_IN_MS","HubConnectionState","HubConnection","constructor","connection","logger","protocol","reconnectPolicy","_nextKeepAlive","_freezeEventListener","_logger","log","Warning","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","onreceive","data","_processIncomingData","onclose","error","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","writeMessage","type","Ping","create","state","connectionId","baseUrl","url","Reconnecting","Error","start","_startPromise","_startWithStateTransitions","Promise","reject","Connecting","Debug","_startInternal","isBrowser","window","document","addEventListener","Connected","e","_stopDuringStartError","undefined","handshakePromise","resolve","_handshakeResolver","_handshakeRejecter","transferFormat","handshakeRequest","name","version","_sendMessage","writeHandshakeRequest","Information","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","features","inherentKeepAlive","_cleanupPingTimer","stop","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","clearTimeout","_completeClose","stream","methodName","_len","arguments","length","args","Array","_key","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","subject","cancelCallback","cancelInvocation","_createCancelInvocation","invocationId","then","_sendWithProtocol","invocationEvent","Completion","complete","next","item","catch","_launchStreams","message","send","_len2","_key2","sendPromise","_createInvocation","invoke","_len3","_key3","p","result","on","newMethod","toLowerCase","indexOf","push","off","method","handlers","removeIdx","splice","callback","onreconnecting","onreconnected","_processHandshakeResponse","messages","parseMessages","Invocation","_invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","remainingData","parseHandshakeResponse","Date","getTime","_timeoutHandle","setTimeout","serverTimeout","_pingServerHandle","nextPing","invocationMessage","target","methods","_createCompletionMessage","methodsCopy","slice","expectsResponse","res","exception","completionMessage","m","prevRes","apply","_cancelCallbacksWithError","_reconnect","removeEventListener","forEach","c","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","toString","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","Object","keys","key","nonblocking","streamId","subscribe","err","_createStreamItemMessage","i","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation"],"sources":["/home/nico/expero/toolkit/signalR-test/client/node_modules/@microsoft/signalr/src/HubConnection.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { AbortError } from \"./Errors\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: (((...args: any[]) => void) | ((...args: any[]) => any))[] };\r\n    private _invocationId: number;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n\r\n            if (!this.connection.features.inherentKeepAlive) {\r\n                await this._sendMessage(this._cachedPingMessage);\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new AbortError(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => any): void\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private async _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methodName = invocationMessage.target.toLowerCase();\r\n        const methods = this._methods[methodName];\r\n        if (!methods) {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${methodName}' found.`);\r\n\r\n            // No handlers provided by client but the server is expecting a response still, so we send an error\r\n            if (invocationMessage.invocationId) {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\r\n        const methodsCopy = methods.slice();\r\n\r\n        // Server expects a response\r\n        const expectsResponse = invocationMessage.invocationId ? true : false;\r\n        // We preserve the last result or exception but still call all handlers\r\n        let res;\r\n        let exception;\r\n        let completionMessage;\r\n        for (const m of methodsCopy) {\r\n            try {\r\n                const prevRes = res;\r\n                res = await m.apply(this, invocationMessage.arguments);\r\n                if (expectsResponse && res && prevRes) {\r\n                    this._logger.log(LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\r\n                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `Client provided multiple results.`, null);\r\n                }\r\n                // Ignore exception if we got a result after, the exception will be logged\r\n                exception = undefined;\r\n            } catch (e) {\r\n                exception = e;\r\n                this._logger.log(LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\r\n            }\r\n        }\r\n        if (completionMessage) {\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else if (expectsResponse) {\r\n            // If there is an exception that means either no result was given or a handler after a result threw\r\n            if (exception) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `${exception}`, null);\r\n            } else if (res !== undefined) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, null, res);\r\n            } else {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                // Client didn't provide a result or throw from a handler, server expects a response so we send an error\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, \"Client didn't provide a result.\", null);\r\n            }\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else {\r\n            if (res) {\r\n                this._logger.log(LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}