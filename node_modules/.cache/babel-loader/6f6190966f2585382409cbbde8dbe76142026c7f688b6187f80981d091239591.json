{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { SubjectSubscription } from \"./Utils\";\n/** Stream implementation to stream items to the server. */\nexport var Subject = /*#__PURE__*/function () {\n  function Subject() {\n    _classCallCheck(this, Subject);\n    this.observers = [];\n  }\n  _createClass(Subject, [{\n    key: \"next\",\n    value: function next(item) {\n      var _iterator = _createForOfIteratorHelper(this.observers),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var observer = _step.value;\n          observer.next(item);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"error\",\n    value: function error(err) {\n      var _iterator2 = _createForOfIteratorHelper(this.observers),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var observer = _step2.value;\n          if (observer.error) {\n            observer.error(err);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      var _iterator3 = _createForOfIteratorHelper(this.observers),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var observer = _step3.value;\n          if (observer.complete) {\n            observer.complete();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(observer) {\n      this.observers.push(observer);\n      return new SubjectSubscription(this, observer);\n    }\n  }]);\n  return Subject;\n}();","map":{"version":3,"names":["SubjectSubscription","Subject","_classCallCheck","observers","_createClass","key","value","next","item","_iterator","_createForOfIteratorHelper","_step","s","n","done","observer","err","e","f","error","_iterator2","_step2","complete","_iterator3","_step3","subscribe","push"],"sources":["/home/nico/expero/toolkit/signalR-test/client/node_modules/@microsoft/signalr/src/Subject.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n"],"mappings":";;;AAAA;AACA;AAGA,SAASA,mBAAmB,QAAQ,SAAS;AAE7C;AACA,WAAaC,OAAO;EAOhB,SAAAA,QAAA;IAAAC,eAAA,OAAAD,OAAA;IACI,IAAI,CAACE,SAAS,GAAG,EAAE;EACvB;EAACC,YAAA,CAAAH,OAAA;IAAAI,GAAA;IAAAC,KAAA,EAEM,SAAAC,KAAKC,IAAO;MAAA,IAAAC,SAAA,GAAAC,0BAAA,CACQ,IAAI,CAACP,SAAS;QAAAQ,KAAA;MAAA;QAArC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAuC;UAAA,IAA5BC,QAAQ,GAAAJ,KAAA,CAAAL,KAAA;UACfS,QAAQ,CAACR,IAAI,CAACC,IAAI,CAAC;;MACtB,SAAAQ,GAAA;QAAAP,SAAA,CAAAQ,CAAA,CAAAD,GAAA;MAAA;QAAAP,SAAA,CAAAS,CAAA;MAAA;IACL;EAAC;IAAAb,GAAA;IAAAC,KAAA,EAEM,SAAAa,MAAMH,GAAQ;MAAA,IAAAI,UAAA,GAAAV,0BAAA,CACM,IAAI,CAACP,SAAS;QAAAkB,MAAA;MAAA;QAArC,KAAAD,UAAA,CAAAR,CAAA,MAAAS,MAAA,GAAAD,UAAA,CAAAP,CAAA,IAAAC,IAAA,GAAuC;UAAA,IAA5BC,QAAQ,GAAAM,MAAA,CAAAf,KAAA;UACf,IAAIS,QAAQ,CAACI,KAAK,EAAE;YAChBJ,QAAQ,CAACI,KAAK,CAACH,GAAG,CAAC;;;MAE1B,SAAAA,GAAA;QAAAI,UAAA,CAAAH,CAAA,CAAAD,GAAA;MAAA;QAAAI,UAAA,CAAAF,CAAA;MAAA;IACL;EAAC;IAAAb,GAAA;IAAAC,KAAA,EAEM,SAAAgB,SAAA,EAAQ;MAAA,IAAAC,UAAA,GAAAb,0BAAA,CACY,IAAI,CAACP,SAAS;QAAAqB,MAAA;MAAA;QAArC,KAAAD,UAAA,CAAAX,CAAA,MAAAY,MAAA,GAAAD,UAAA,CAAAV,CAAA,IAAAC,IAAA,GAAuC;UAAA,IAA5BC,QAAQ,GAAAS,MAAA,CAAAlB,KAAA;UACf,IAAIS,QAAQ,CAACO,QAAQ,EAAE;YACnBP,QAAQ,CAACO,QAAQ,EAAE;;;MAE1B,SAAAN,GAAA;QAAAO,UAAA,CAAAN,CAAA,CAAAD,GAAA;MAAA;QAAAO,UAAA,CAAAL,CAAA;MAAA;IACL;EAAC;IAAAb,GAAA;IAAAC,KAAA,EAEM,SAAAmB,UAAUV,QAA8B;MAC3C,IAAI,CAACZ,SAAS,CAACuB,IAAI,CAACX,QAAQ,CAAC;MAC7B,OAAO,IAAIf,mBAAmB,CAAC,IAAI,EAAEe,QAAQ,CAAC;IAClD;EAAC;EAAA,OAAAd,OAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}