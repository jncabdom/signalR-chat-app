{"ast":null,"code":"import _classCallCheck from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nico/expero/toolkit/signalR-test/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nimport { isArrayBuffer } from \"./Utils\";\n/** @private */\nexport var HandshakeProtocol = /*#__PURE__*/function () {\n  function HandshakeProtocol() {\n    _classCallCheck(this, HandshakeProtocol);\n  }\n  _createClass(HandshakeProtocol, [{\n    key: \"writeHandshakeRequest\",\n    value:\n    // Handshake request is always JSON\n    function writeHandshakeRequest(handshakeRequest) {\n      return TextMessageFormat.write(JSON.stringify(handshakeRequest));\n    }\n  }, {\n    key: \"parseHandshakeResponse\",\n    value: function parseHandshakeResponse(data) {\n      var messageData;\n      var remainingData;\n      if (isArrayBuffer(data)) {\n        // Format is binary but still need to read JSON text from handshake response\n        var binaryData = new Uint8Array(data);\n        var separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\n        if (separatorIndex === -1) {\n          throw new Error(\"Message is incomplete.\");\n        }\n        // content before separator is handshake response\n        // optional content after is additional messages\n        var responseLength = separatorIndex + 1;\n        messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\n        remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n      } else {\n        var textData = data;\n        var _separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\n        if (_separatorIndex === -1) {\n          throw new Error(\"Message is incomplete.\");\n        }\n        // content before separator is handshake response\n        // optional content after is additional messages\n        var _responseLength = _separatorIndex + 1;\n        messageData = textData.substring(0, _responseLength);\n        remainingData = textData.length > _responseLength ? textData.substring(_responseLength) : null;\n      }\n      // At this point we should have just the single handshake message\n      var messages = TextMessageFormat.parse(messageData);\n      var response = JSON.parse(messages[0]);\n      if (response.type) {\n        throw new Error(\"Expected a handshake response from the server.\");\n      }\n      var responseMessage = response;\n      // multiple messages could have arrived with handshake\n      // return additional data to be parsed as usual, or null if all parsed\n      return [remainingData, responseMessage];\n    }\n  }]);\n  return HandshakeProtocol;\n}();","map":{"version":3,"names":["TextMessageFormat","isArrayBuffer","HandshakeProtocol","_classCallCheck","_createClass","key","value","writeHandshakeRequest","handshakeRequest","write","JSON","stringify","parseHandshakeResponse","data","messageData","remainingData","binaryData","Uint8Array","separatorIndex","indexOf","RecordSeparatorCode","Error","responseLength","String","fromCharCode","apply","Array","prototype","slice","call","byteLength","buffer","textData","RecordSeparator","substring","length","messages","parse","response","type","responseMessage"],"sources":["/home/nico/expero/toolkit/signalR-test/client/node_modules/@microsoft/signalr/src/HandshakeProtocol.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n"],"mappings":";;AAAA;AACA;AAEA,SAASA,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,aAAa,QAAQ,SAAS;AAcvC;AACA,WAAaC,iBAAiB;EAAA,SAAAA,kBAAA;IAAAC,eAAA,OAAAD,iBAAA;EAAA;EAAAE,YAAA,CAAAF,iBAAA;IAAAG,GAAA;IAAAC,KAAA;IAC1B;IACO,SAAAC,sBAAsBC,gBAAyC;MAClE,OAAOR,iBAAiB,CAACS,KAAK,CAACC,IAAI,CAACC,SAAS,CAACH,gBAAgB,CAAC,CAAC;IACpE;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAEM,SAAAM,uBAAuBC,IAAS;MACnC,IAAIC,WAAmB;MACvB,IAAIC,aAAkB;MAEtB,IAAId,aAAa,CAACY,IAAI,CAAC,EAAE;QACrB;QACA,IAAMG,UAAU,GAAG,IAAIC,UAAU,CAACJ,IAAI,CAAC;QACvC,IAAMK,cAAc,GAAGF,UAAU,CAACG,OAAO,CAACnB,iBAAiB,CAACoB,mBAAmB,CAAC;QAChF,IAAIF,cAAc,KAAK,CAAC,CAAC,EAAE;UACvB,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;;QAG7C;QACA;QACA,IAAMC,cAAc,GAAGJ,cAAc,GAAG,CAAC;QACzCJ,WAAW,GAAGS,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAEC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACb,UAAU,CAACY,KAAK,CAAC,CAAC,EAAEN,cAAc,CAAC,CAAC,CAAC;QAC9GP,aAAa,GAAIC,UAAU,CAACc,UAAU,GAAGR,cAAc,GAAIN,UAAU,CAACY,KAAK,CAACN,cAAc,CAAC,CAACS,MAAM,GAAG,IAAI;OAC5G,MAAM;QACH,IAAMC,QAAQ,GAAWnB,IAAI;QAC7B,IAAMK,eAAc,GAAGc,QAAQ,CAACb,OAAO,CAACnB,iBAAiB,CAACiC,eAAe,CAAC;QAC1E,IAAIf,eAAc,KAAK,CAAC,CAAC,EAAE;UACvB,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;;QAG7C;QACA;QACA,IAAMC,eAAc,GAAGJ,eAAc,GAAG,CAAC;QACzCJ,WAAW,GAAGkB,QAAQ,CAACE,SAAS,CAAC,CAAC,EAAEZ,eAAc,CAAC;QACnDP,aAAa,GAAIiB,QAAQ,CAACG,MAAM,GAAGb,eAAc,GAAIU,QAAQ,CAACE,SAAS,CAACZ,eAAc,CAAC,GAAG,IAAI;;MAGlG;MACA,IAAMc,QAAQ,GAAGpC,iBAAiB,CAACqC,KAAK,CAACvB,WAAW,CAAC;MACrD,IAAMwB,QAAQ,GAAG5B,IAAI,CAAC2B,KAAK,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;MACxC,IAAIE,QAAQ,CAACC,IAAI,EAAE;QACf,MAAM,IAAIlB,KAAK,CAAC,gDAAgD,CAAC;;MAErE,IAAMmB,eAAe,GAA6BF,QAAQ;MAE1D;MACA;MACA,OAAO,CAACvB,aAAa,EAAEyB,eAAe,CAAC;IAC3C;EAAC;EAAA,OAAAtC,iBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}